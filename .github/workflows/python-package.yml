# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test vkdispatch

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build-and-test-on-unix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # On Linux, install Vulkan dependencies + GDB
    - name: Install Vulkan and GDB (Linux)
      if: startsWith(runner.os, 'Linux')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libvulkan1 \
          vulkan-tools \
          mesa-vulkan-drivers \
          gdb

    # On macOS, install LLDB via Homebrew
    - name: Install LLDB (macOS)
      if: startsWith(runner.os, 'macos')
      run: |
        brew update
        brew install lldb

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python fetch_dependencies.py
        python -m pip install .

    # Run tests under GDB on Linux so we get a backtrace on segfault
    - name: Test with pytest under GDB (Linux)
      if: startsWith(runner.os, 'Linux')
      run: |
        # Explanation:
        #  -ex "run" tells GDB to run the program
        #  -ex "thread apply all bt" prints backtraces of all threads on crash
        #  -ex "quit" exits GDB afterwards
        gdb -q -ex "run" -ex "thread apply all bt" -ex "quit" --args python -m pytest -s

    # Run tests under LLDB on macOS so we get a backtrace on segfault
    - name: Test with pytest under LLDB (macOS)
      if: startsWith(runner.os, 'macos')
      run: |
        # Explanation:
        #  -b means batch mode (no interactive prompt)
        #  -o "run" tells LLDB to run the program
        #  -o "thread backtrace all" prints backtraces of all threads on crash
        #  -o "quit" exits LLDB
        lldb -b -o "run" -o "thread backtrace all" -o "quit" -- python -m pytest -s
  
  # build-and-test-on-windows:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest]
  #       python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}
    
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install pytest
  #       python fetch_dependencies.py --no-molten-vk
  #       python -m pip install -r requirements.txt
  #       python -m pip install .

  #   - name: Download and extract Mesa 3D
  #     run: |
  #       curl -LO https://github.com/pal1000/mesa-dist-win/releases/download/24.1.4/mesa3d-24.1.4-release-msvc.7z
  #       7z x mesa3d-24.1.4-release-msvc.7z -oC:\mesa-dist-win
  #       echo "PATH=C:\mesa-dist-win\bin;%PATH%" >> $Env:GITHUB_ENV

  #   - name: Set up Vulkan ICD environment variable
  #     run: echo "VK_ICD_FILENAMES=C:\mesa-dist-win\bin\x64\lvp_icd.x86_64.json" >> $Env:GITHUB_ENV

  #   - name: Test with pytest
  #     env:
  #       VK_ICD_FILENAMES: C:\mesa-dist-win\bin\x64\lvp_icd.x86_64.json
  #     run: |
  #       pytest
